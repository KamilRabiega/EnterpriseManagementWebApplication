@page
@model EnterpriseManagementApp.Pages.Magazine.Products.StockLevelModel
@using EnterpriseManagementApp.Data
@inject EmaDbContext emaDbContext

<div class="bg-light bg-opacity-10 py-2 mb-2">
    <div class="container text-center">
        <h1>Stock page</h1>
    </div>
</div>

<partial name="_Notification">

    @if (Model.ProductionItems != null && Model.ProductionItems.Any())
    {
        <div class="container" style="width: 50%;">
            <table class="table text-center">
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Type</td>
                        <td>Quantity (pallets)</td>
                        <td>Quantity (pcs)</td>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var results = emaDbContext.ProductionItems
                            .GroupBy(x => x.TypeId)
                            .Select(x => new
                            {
                                TypeId = x.Key,
                                QuantityPallets = x.Sum(p => p.QuantityPallets),
                                QuantityPCS = x.Sum(p => p.QuantityPCS),
                            }).ToList();

                        int number = 1;
                    }

                    @foreach(var element in results)
                    {
                        <tr>
                            <td>@number.</td>
                            <td>@element.TypeId</td>
                            <td>@element.QuantityPallets</td>
                            <td>@element.QuantityPCS</td>
                        </tr>
                        number += 1;
                    }




@*
                    @foreach(var item in Model.ProductionItems)
                    {
                        var counts = emaDbContext.ProductionItems
                        .GroupBy(m => m.TypeId)
                        .Select(g => new 
                        { 
                            Count = g.Sum(p => p.QuantityPallets)
                        });

                    <tr>
                        <td>@item.Type.Id</td>
                        <td>@item.Type.Name @item.Type.Diameter/@item.Type.Length/@item.Type.WallThickness/@item.Type.Class</td>
                        <td>@counts.FirstOrDefault().Count</td>
                    </tr>
                    }*@
                    
                    



                        @*@foreach (var item in Model.Types)
                        {
                            var counts = await emaDbContext.ProductionItems.GroupBy(m => m.TypeId).Select(g =>
                            new { TypeId = g.Key, Count = g.Sum() }).ToListAsync();
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.ProductionItem</td>
                            </tr>
                        }*@
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="container text-center pt-5">
            <p>
                There are no products to show
            </p>
        </div>
    }
