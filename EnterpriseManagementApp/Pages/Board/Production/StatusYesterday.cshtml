@page
@model EnterpriseManagementApp.Pages.Board.Production.StatusYesterdayModel
@using EnterpriseManagementApp.Data
@using Microsoft.EntityFrameworkCore
@inject EmaDbContext emaDbContext
@{
    ViewData["Title"] = "Production status";
    var yesterdayOnlyDay = DateTime.Now.Date.AddDays(-1).ToString("dd/MM/yyyy");
}
<div class="bg-light bg-opacity-10 py-2 mb-2">
    <div class="container text-center">
        <h1>Production status for yesterday - @yesterdayOnlyDay</h1>
    </div>
</div>

<partial name="_Notification">

    @if (Model.ProductionItems != null && Model.ProductionItems.Any())
    {
        <div class="container" style="width: 50%;">
            <table class="table text-center">
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Type</td>
                        <td>Quantity (pallets)</td>
                        <td>Quantity (pcs)</td>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var today = DateTime.UtcNow.Date;
                        var yesterday = DateTime.UtcNow.Date.AddDays(-1);
                        var results = emaDbContext.ProductionItems
                        .Where(p => p.ProductionDate.Date >= yesterday && p.ProductionDate.Date <= today)
                        .Select(x => new
                        {
                            TypeId = x.Type.Id,
                            TypeName = x.Type.Name +
                        "/" + x.Type.Diameter +
                        "/" + x.Type.Length +
                        "/" + x.Type.WallThickness +
                        "/" + x.Type.Class,
                            QuantityPallets = x.QuantityPallets,
                            QuantityPCS = x.QuantityPCS,
                        })
                        .GroupBy(x => new
                        {
                            x.TypeId,
                            x.TypeName
                        })
                        .Select(x => new
                        {
                            TypeId = x.Key.TypeId,
                            TypeName = x.Key.TypeName,
                            QuantityPallets = x.Sum(p => p.QuantityPallets),
                            QuantityPCS = x.Sum(p => p.QuantityPCS),
                        }).ToList();

                        int number = 1;
                    }

                    @foreach (var element in results)
                    {
                        <tr>
                            <td>@number.</td>
                            <td>@element.TypeName</td>
                            <td>@element.QuantityPallets</td>
                            <td>@element.QuantityPCS</td>
                        </tr>
                        number += 1;
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="container text-center pt-5">
            <p>
                There are no products to show
            </p>
        </div>
    }
